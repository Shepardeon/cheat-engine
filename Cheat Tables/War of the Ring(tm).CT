<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="31">
  <CheatEntries>
    <CheatEntry>
      <ID>11</ID>
      <Description>"Cheats"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" Activated="1" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>7</ID>
          <Description>"Free Food"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(FREEFOOD,Rings.exe,29 10 8B 10 8B 89 08 01 00 00)
registersymbol(FREEFOOD)

FREEFOOD:
  db 90 90
return:


[DISABLE]

FREEFOOD:
  db 29 10

unregistersymbol(FREEFOOD)

{
// ORIGINAL CODE - INJECTION POINT: "Rings.exe"+15C063

"Rings.exe"+15C04D: 3B C2              -  cmp eax,edx
"Rings.exe"+15C04F: 76 02              -  jna Rings.exe+15C053
"Rings.exe"+15C051: 89 11              -  mov [ecx],edx
"Rings.exe"+15C053: C3                 -  ret 
"Rings.exe"+15C054: 8D 81 00 01 00 00  -  lea eax,[ecx+00000100]
"Rings.exe"+15C05A: 56                 -  push esi
"Rings.exe"+15C05B: 8B 30              -  mov esi,[eax]
"Rings.exe"+15C05D: 3B D6              -  cmp edx,esi
"Rings.exe"+15C05F: 76 02              -  jna Rings.exe+15C063
"Rings.exe"+15C061: 8B D6              -  mov edx,esi
// ---------- INJECTING HERE ----------
"Rings.exe"+15C063: 29 10              -  sub [eax],edx
"Rings.exe"+15C065: 8B 10              -  mov edx,[eax]
"Rings.exe"+15C067: 8B 89 08 01 00 00  -  mov ecx,[ecx+00000108]
// ---------- DONE INJECTING  ----------
"Rings.exe"+15C06D: 3B D1              -  cmp edx,ecx
"Rings.exe"+15C06F: 5E                 -  pop esi
"Rings.exe"+15C070: 76 02              -  jna Rings.exe+15C074
"Rings.exe"+15C072: 89 08              -  mov [eax],ecx
"Rings.exe"+15C074: C3                 -  ret 
"Rings.exe"+15C075: 8D 81 04 01 00 00  -  lea eax,[ecx+00000104]
"Rings.exe"+15C07B: 56                 -  push esi
"Rings.exe"+15C07C: 8B 30              -  mov esi,[eax]
"Rings.exe"+15C07E: 3B D6              -  cmp edx,esi
"Rings.exe"+15C080: 76 02              -  jna Rings.exe+15C084
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>9</ID>
          <Description>"Free Iron"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(FREEIRON,Rings.exe,29 10 8B 10 8B 89 0C 01 00 00)
registersymbol(FREEIRON)

FREEIRON:
  db 90 90
return:


[DISABLE]

FREEIRON:
  db 29 10

unregistersymbol(FREEIRON)

{
// ORIGINAL CODE - INJECTION POINT: "Rings.exe"+15C084

"Rings.exe"+15C06F: 5E                 -  pop esi
"Rings.exe"+15C070: 76 02              -  jna Rings.exe+15C074
"Rings.exe"+15C072: 89 08              -  mov [eax],ecx
"Rings.exe"+15C074: C3                 -  ret 
"Rings.exe"+15C075: 8D 81 04 01 00 00  -  lea eax,[ecx+00000104]
"Rings.exe"+15C07B: 56                 -  push esi
"Rings.exe"+15C07C: 8B 30              -  mov esi,[eax]
"Rings.exe"+15C07E: 3B D6              -  cmp edx,esi
"Rings.exe"+15C080: 76 02              -  jna Rings.exe+15C084
"Rings.exe"+15C082: 8B D6              -  mov edx,esi
// ---------- INJECTING HERE ----------
"Rings.exe"+15C084: 29 10              -  sub [eax],edx
"Rings.exe"+15C086: 8B 10              -  mov edx,[eax]
"Rings.exe"+15C088: 8B 89 0C 01 00 00  -  mov ecx,[ecx+0000010C]
// ---------- DONE INJECTING  ----------
"Rings.exe"+15C08E: 3B D1              -  cmp edx,ecx
"Rings.exe"+15C090: 5E                 -  pop esi
"Rings.exe"+15C091: 76 02              -  jna Rings.exe+15C095
"Rings.exe"+15C093: 89 08              -  mov [eax],ecx
"Rings.exe"+15C095: C3                 -  ret 
"Rings.exe"+15C096: 51                 -  push ecx
"Rings.exe"+15C097: 8B 81 F8 00 00 00  -  mov eax,[ecx+000000F8]
"Rings.exe"+15C09D: 3B D0              -  cmp edx,eax
"Rings.exe"+15C09F: 76 02              -  jna Rings.exe+15C0A3
"Rings.exe"+15C0A1: 8B D0              -  mov edx,eax
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>39</ID>
          <Description>"Free Pop"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(INFPOP,Rings.exe,01 BB 18 01 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  add [ebx+00000118],0
  jmp return

INFPOP:
  jmp newmem
  nop
return:
registersymbol(INFPOP)

[DISABLE]

INFPOP:
  db 01 BB 18 01 00 00

unregistersymbol(INFPOP)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Rings.exe"+127372

"Rings.exe"+127353: FF 76 18              -  push [esi+18]
"Rings.exe"+127356: E8 25 34 14 00        -  call Rings.exe+26A780
"Rings.exe"+12735B: 8B 80 B4 00 00 00     -  mov eax,[eax+000000B4]
"Rings.exe"+127361: 59                    -  pop ecx
"Rings.exe"+127362: 89 46 08              -  mov [esi+08],eax
"Rings.exe"+127365: 8B 46 0C              -  mov eax,[esi+0C]
"Rings.exe"+127368: 6A 00                 -  push 00
"Rings.exe"+12736A: 89 46 04              -  mov [esi+04],eax
"Rings.exe"+12736D: 6A 04                 -  push 04
"Rings.exe"+12736F: C6 06 01              -  mov byte ptr [esi],01
// ---------- INJECTING HERE ----------
"Rings.exe"+127372: 01 BB 18 01 00 00     -  add [ebx+00000118],edi
// ---------- DONE INJECTING  ----------
"Rings.exe"+127378: 58                    -  pop eax
"Rings.exe"+127379: 8B 8E B4 00 00 00     -  mov ecx,[esi+000000B4]
"Rings.exe"+12737F: E8 DC 47 FF FF        -  call Rings.exe+11BB60
"Rings.exe"+127384: 5F                    -  pop edi
"Rings.exe"+127385: 5E                    -  pop esi
"Rings.exe"+127386: 5B                    -  pop ebx
"Rings.exe"+127387: C9                    -  leave 
"Rings.exe"+127388: C2 04 00              -  ret 0004
"Rings.exe"+12738B: 51                    -  push ecx
"Rings.exe"+12738C: 56                    -  push esi
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>10</ID>
          <Description>"Infinite Fate"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(INFFATE,Rings.exe,89 81 F8 00 00 00 2B) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov [ecx+000000F8],7
  jmp return

INFFATE:
  jmp newmem
  nop
return:
registersymbol(INFFATE)

[DISABLE]

INFFATE:
  db 89 81 F8 00 00 00

unregistersymbol(INFFATE)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Rings.exe"+15C334

"Rings.exe"+15C311: 51                    -  push ecx
"Rings.exe"+15C312: D9 81 FC 00 00 00     -  fld dword ptr [ecx+000000FC]
"Rings.exe"+15C318: 56                    -  push esi
"Rings.exe"+15C319: DF 7D F8              -  fistp qword ptr [ebp-08]
"Rings.exe"+15C31C: 57                    -  push edi
"Rings.exe"+15C31D: 8B 45 F8              -  mov eax,[ebp-08]
"Rings.exe"+15C320: 8B 3D A8 E5 80 00     -  mov edi,[Rings.exe+40E5A8]
"Rings.exe"+15C326: 33 D2                 -  xor edx,edx
"Rings.exe"+15C328: F7 B7 28 01 00 00     -  div [edi+00000128]
"Rings.exe"+15C32E: 8B B1 F8 00 00 00     -  mov esi,[ecx+000000F8]
// ---------- INJECTING HERE ----------
"Rings.exe"+15C334: 89 81 F8 00 00 00     -  mov [ecx+000000F8],eax
// ---------- DONE INJECTING  ----------
"Rings.exe"+15C33A: 2B C6                 -  sub eax,esi
"Rings.exe"+15C33C: 85 C0                 -  test eax,eax
"Rings.exe"+15C33E: 7E 03                 -  jle Rings.exe+15C343
"Rings.exe"+15C340: 01 41 08              -  add [ecx+08],eax
"Rings.exe"+15C343: 8B 81 90 00 00 00     -  mov eax,[ecx+00000090]
"Rings.exe"+15C349: 3B 05 18 06 B5 00     -  cmp eax,[Rings.exe+750618]
"Rings.exe"+15C34F: 75 32                 -  jne Rings.exe+15C383
"Rings.exe"+15C351: 39 B1 F8 00 00 00     -  cmp [ecx+000000F8],esi
"Rings.exe"+15C357: 76 2A                 -  jna Rings.exe+15C383
"Rings.exe"+15C359: 6A 01                 -  push 01
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>13</ID>
          <Description>"Unlimited Power"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(INFPOWER,Rings.exe,88 84 0A D4 00 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov [edx+ecx+000000D4],1
  jmp return

INFPOWER:
  jmp newmem
  nop 2
return:
registersymbol(INFPOWER)

[DISABLE]

INFPOWER:
  db 88 84 0A D4 00 00 00

unregistersymbol(INFPOWER)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Rings.exe"+1450C0

"Rings.exe"+1450A4: 32 C0                 -  xor al,al
"Rings.exe"+1450A6: C2 04 00              -  ret 0004
"Rings.exe"+1450A9: 90                    -  nop 
"Rings.exe"+1450AA: 90                    -  nop 
"Rings.exe"+1450AB: 8D 04 40              -  lea eax,[eax+eax*2]
"Rings.exe"+1450AE: 8D 4C 81 04           -  lea ecx,[ecx+eax*4+04]
"Rings.exe"+1450B2: E9 1B 59 EC FF        -  jmp Rings.exe+A9D2
"Rings.exe"+1450B7: 90                    -  nop 
"Rings.exe"+1450B8: 8A 44 24 08           -  mov al,[esp+08]
"Rings.exe"+1450BC: 8B 54 24 04           -  mov edx,[esp+04]
// ---------- INJECTING HERE ----------
"Rings.exe"+1450C0: 88 84 0A D4 00 00 00  -  mov [edx+ecx+000000D4],al
// ---------- DONE INJECTING  ----------
"Rings.exe"+1450C7: C2 08 00              -  ret 0008
"Rings.exe"+1450CA: 80 78 01 00           -  cmp byte ptr [eax+01],00
"Rings.exe"+1450CE: 75 03                 -  jne Rings.exe+1450D3
"Rings.exe"+1450D0: 32 C0                 -  xor al,al
"Rings.exe"+1450D2: C3                    -  ret 
"Rings.exe"+1450D3: 90                    -  nop 
"Rings.exe"+1450D4: 8A 84 01 D4 00 00 00  -  mov al,[ecx+eax+000000D4]
"Rings.exe"+1450DB: C3                    -  ret 
"Rings.exe"+1450DC: 56                    -  push esi
"Rings.exe"+1450DD: 57                    -  push edi
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>26</ID>
          <Description>"Player units God Mode"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(GODMODE,Rings.exe,D9 9E 0C 05 00 00 83) // should be unique
alloc(newmem,$1000)

label(code)
label(return)
label(enemy)

newmem:

code:
  pushf
  fstp [esi+50C] // Pop for cleanup
  cmp [esi+504], 0 // Test camp
  jne enemy
  push eax
  push ebx

  mov eax, [esi+D0] // Load database PTR
  mov ebx, [esi+D78] // Load bonus HP (for heroes)
  add ebx, [eax+BC] // Add base HP + bonus HP
  mov [newmem+FF], ebx
  fild [newmem+FF]
  fstp [esi+50C]

  pop ebx
  pop eax
  popf
  jmp return

enemy:
  popf
  jmp return

GODMODE:
  jmp newmem
  nop
return:
registersymbol(GODMODE)

[DISABLE]

GODMODE:
  db D9 9E 0C 05 00 00

unregistersymbol(GODMODE)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Rings.exe"+3789B

"Rings.exe"+37870: 38 8E B9 0C 00 00     -  cmp [esi+00000CB9],cl
"Rings.exe"+37876: 74 14                 -  je Rings.exe+3788C
"Rings.exe"+37878: D9 45 08              -  fld dword ptr [ebp+08]
"Rings.exe"+3787B: D8 1D 70 A5 72 00     -  fcomp dword ptr [Rings.exe+32A570]
"Rings.exe"+37881: DF E0                 -  fnstsw ax
"Rings.exe"+37883: F6 C4 05              -  test ah,05
"Rings.exe"+37886: 0F 8B 8D 00 00 00     -  jnp Rings.exe+37919
"Rings.exe"+3788C: D9 45 08              -  fld dword ptr [ebp+08]
"Rings.exe"+3788F: 8B 86 D0 00 00 00     -  mov eax,[esi+000000D0]
"Rings.exe"+37895: D8 86 0C 05 00 00     -  fadd dword ptr [esi+0000050C]
// ---------- INJECTING HERE ----------
"Rings.exe"+3789B: D9 9E 0C 05 00 00     -  fstp dword ptr [esi+0000050C]
// ---------- DONE INJECTING  ----------
"Rings.exe"+378A1: 83 B8 A0 00 00 00 FF  -  cmp dword ptr [eax+000000A0],-01
"Rings.exe"+378A8: 75 08                 -  jne Rings.exe+378B2
"Rings.exe"+378AA: 38 8E EB 0B 00 00     -  cmp [esi+00000BEB],cl
"Rings.exe"+378B0: 74 17                 -  je Rings.exe+378C9
"Rings.exe"+378B2: D9 45 08              -  fld dword ptr [ebp+08]
"Rings.exe"+378B5: D8 1D 70 A5 72 00     -  fcomp dword ptr [Rings.exe+32A570]
"Rings.exe"+378BB: DF E0                 -  fnstsw ax
"Rings.exe"+378BD: F6 C4 05              -  test ah,05
"Rings.exe"+378C0: 7A 07                 -  jp Rings.exe+378C9
"Rings.exe"+378C2: 51                    -  push ecx
}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>29</ID>
              <Description>"Player units God Mode + One Hit enemies"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]

aobscanmodule(GODMODE,Rings.exe,D9 9E 0C 05 00 00 83) // should be unique
alloc(newmem,$1000)

label(code)
label(return)
label(enemy)

newmem:

code:
  pushf
  fstp [esi+50C] // Pop for cleanup
  cmp [esi+504], 0 // Test camp
  jne enemy
  push eax
  push ebx

  mov eax, [esi+D0] // Load database PTR
  mov ebx, [esi+D78] // Load bonus HP (for heroes)
  add ebx, [eax+BC] // Add base HP + bonus HP
  mov [newmem+FF], ebx
  fild [newmem+FF]
  fstp [esi+50C]

  pop ebx
  pop eax
  popf
  jmp return

enemy:
  fldz
  fstp [esi+50C]
  popf
  jmp return

GODMODE:
  jmp newmem
  nop
return:
registersymbol(GODMODE)

[DISABLE]

GODMODE:
  db D9 9E 0C 05 00 00

unregistersymbol(GODMODE)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Rings.exe"+3789B

"Rings.exe"+37870: 38 8E B9 0C 00 00     -  cmp [esi+00000CB9],cl
"Rings.exe"+37876: 74 14                 -  je Rings.exe+3788C
"Rings.exe"+37878: D9 45 08              -  fld dword ptr [ebp+08]
"Rings.exe"+3787B: D8 1D 70 A5 72 00     -  fcomp dword ptr [Rings.exe+32A570]
"Rings.exe"+37881: DF E0                 -  fnstsw ax
"Rings.exe"+37883: F6 C4 05              -  test ah,05
"Rings.exe"+37886: 0F 8B 8D 00 00 00     -  jnp Rings.exe+37919
"Rings.exe"+3788C: D9 45 08              -  fld dword ptr [ebp+08]
"Rings.exe"+3788F: 8B 86 D0 00 00 00     -  mov eax,[esi+000000D0]
"Rings.exe"+37895: D8 86 0C 05 00 00     -  fadd dword ptr [esi+0000050C]
// ---------- INJECTING HERE ----------
"Rings.exe"+3789B: D9 9E 0C 05 00 00     -  fstp dword ptr [esi+0000050C]
// ---------- DONE INJECTING  ----------
"Rings.exe"+378A1: 83 B8 A0 00 00 00 FF  -  cmp dword ptr [eax+000000A0],-01
"Rings.exe"+378A8: 75 08                 -  jne Rings.exe+378B2
"Rings.exe"+378AA: 38 8E EB 0B 00 00     -  cmp [esi+00000BEB],cl
"Rings.exe"+378B0: 74 17                 -  je Rings.exe+378C9
"Rings.exe"+378B2: D9 45 08              -  fld dword ptr [ebp+08]
"Rings.exe"+378B5: D8 1D 70 A5 72 00     -  fcomp dword ptr [Rings.exe+32A570]
"Rings.exe"+378BB: DF E0                 -  fnstsw ax
"Rings.exe"+378BD: F6 C4 05              -  test ah,05
"Rings.exe"+378C0: 7A 07                 -  jp Rings.exe+378C9
"Rings.exe"+378C2: 51                    -  push ecx
}
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>27</ID>
          <Description>"Player buildings God Mode + Instant Build"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(INSTANTBUILD,Rings.exe,D9 96 10 01 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(return)
label(enemy)

newmem:

code:
  pushf
  cmp [esi+104], 0 // Test camp
  jne enemy
  fstp [newmem+110] // Dump old data
  push eax
  push ebx

  mov eax, [esi+5AC] // Load database PTR
  mov ebx, [eax+28]  // Load base HP
  mov [newmem+FF], ebx
  fild [newmem+FF]  // Load new data to stack
  fst [esi+110]

  pop ebx
  pop eax
  popf
  jmp return

enemy:
  fst dword ptr [esi+110]
  popf
  jmp return

INSTANTBUILD:
  jmp newmem
  nop
return:
registersymbol(INSTANTBUILD)

[DISABLE]

INSTANTBUILD:
  db D9 96 10 01 00 00

unregistersymbol(INSTANTBUILD)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Rings.exe"+11A95E

"Rings.exe"+11A93C: 8B C6                 -  mov eax,esi
"Rings.exe"+11A93E: E8 BF 41 00 00        -  call Rings.exe+11EB02
"Rings.exe"+11A943: 84 C0                 -  test al,al
"Rings.exe"+11A945: 74 14                 -  je Rings.exe+11A95B
"Rings.exe"+11A947: D9 45 08              -  fld dword ptr [ebp+08]
"Rings.exe"+11A94A: D8 1D 70 A5 72 00     -  fcomp dword ptr [Rings.exe+32A570]
"Rings.exe"+11A950: DF E0                 -  fnstsw ax
"Rings.exe"+11A952: F6 C4 05              -  test ah,05
"Rings.exe"+11A955: 0F 8B 6A 01 00 00     -  jnp Rings.exe+11AAC5
"Rings.exe"+11A95B: D9 45 08              -  fld dword ptr [ebp+08]
"Rings.exe"+11A95E: D8 86 10 01 00 00     -  fadd dword ptr [esi+00000110]
// ---------- INJECTING HERE ----------
"Rings.exe"+11A964: D9 96 10 01 00 00     -  fst dword ptr [esi+00000110]
// ---------- DONE INJECTING  ----------
"Rings.exe"+11A96A: D8 1D 70 A5 72 00     -  fcomp dword ptr [Rings.exe+32A570]
"Rings.exe"+11A970: DF E0                 -  fnstsw ax
"Rings.exe"+11A972: F6 C4 05              -  test ah,05
"Rings.exe"+11A975: 7A 04                 -  jp Rings.exe+11A97B
"Rings.exe"+11A977: D9 EE                 -  fldz
"Rings.exe"+11A979: EB 19                 -  jmp Rings.exe+11A994
"Rings.exe"+11A97B: 8B CE                 -  mov ecx,esi
"Rings.exe"+11A97D: E8 A6 40 00 00        -  call Rings.exe+11EA28
"Rings.exe"+11A982: D8 9E 10 01 00 00     -  fcomp dword ptr [esi+00000110]
}

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>28</ID>
              <Description>"Player buildings God Mode + Instant Build + One Hit buildings"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]

aobscanmodule(INSTANTBUILD,Rings.exe,D9 96 10 01 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(return)
label(enemy)

newmem:

code:
  pushf
  fstp [newmem+110] // Dump old data
  cmp [esi+104], 0 // Test camp
  jne enemy
  push eax
  push ebx

  mov eax, [esi+5AC] // Load database PTR
  mov ebx, [eax+28]  // Load base HP
  mov [newmem+FF], ebx
  fild [newmem+FF]  // Load new data to stack
  fst [esi+110]

  pop ebx
  pop eax
  popf
  jmp return

enemy:
  fldz
  fst dword ptr [esi+110] // Instant destroy
  popf
  jmp return

INSTANTBUILD:
  jmp newmem
  nop
return:
registersymbol(INSTANTBUILD)

[DISABLE]

INSTANTBUILD:
  db D9 96 10 01 00 00

unregistersymbol(INSTANTBUILD)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Rings.exe"+11A95E

"Rings.exe"+11A93C: 8B C6                 -  mov eax,esi
"Rings.exe"+11A93E: E8 BF 41 00 00        -  call Rings.exe+11EB02
"Rings.exe"+11A943: 84 C0                 -  test al,al
"Rings.exe"+11A945: 74 14                 -  je Rings.exe+11A95B
"Rings.exe"+11A947: D9 45 08              -  fld dword ptr [ebp+08]
"Rings.exe"+11A94A: D8 1D 70 A5 72 00     -  fcomp dword ptr [Rings.exe+32A570]
"Rings.exe"+11A950: DF E0                 -  fnstsw ax
"Rings.exe"+11A952: F6 C4 05              -  test ah,05
"Rings.exe"+11A955: 0F 8B 6A 01 00 00     -  jnp Rings.exe+11AAC5
"Rings.exe"+11A95B: D9 45 08              -  fld dword ptr [ebp+08]
"Rings.exe"+11A95E: D8 86 10 01 00 00     -  fadd dword ptr [esi+00000110]
// ---------- INJECTING HERE ----------
"Rings.exe"+11A964: D9 96 10 01 00 00     -  fst dword ptr [esi+00000110]
// ---------- DONE INJECTING  ----------
"Rings.exe"+11A96A: D8 1D 70 A5 72 00     -  fcomp dword ptr [Rings.exe+32A570]
"Rings.exe"+11A970: DF E0                 -  fnstsw ax
"Rings.exe"+11A972: F6 C4 05              -  test ah,05
"Rings.exe"+11A975: 7A 04                 -  jp Rings.exe+11A97B
"Rings.exe"+11A977: D9 EE                 -  fldz
"Rings.exe"+11A979: EB 19                 -  jmp Rings.exe+11A994
"Rings.exe"+11A97B: 8B CE                 -  mov ecx,esi
"Rings.exe"+11A97D: E8 A6 40 00 00        -  call Rings.exe+11EA28
"Rings.exe"+11A982: D8 9E 10 01 00 00     -  fcomp dword ptr [esi+00000110]
}

</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>30</ID>
          <Description>"Instant Unit Train"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(INSTANTTRAIN,Rings.exe,8B 80 B4 00 00 00 59) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov eax,0
  jmp return

INSTANTTRAIN:
  jmp newmem
  nop
return:
registersymbol(INSTANTTRAIN)

[DISABLE]

INSTANTTRAIN:
  db 8B 80 B4 00 00 00

unregistersymbol(INSTANTTRAIN)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Rings.exe"+12735B

"Rings.exe"+127339: 8B 0D A8 E5 80 00     -  mov ecx,[Rings.exe+40E5A8]
"Rings.exe"+12733F: 03 C7                 -  add eax,edi
"Rings.exe"+127341: 3B 81 A0 00 00 00     -  cmp eax,[ecx+000000A0]
"Rings.exe"+127347: 1B C0                 -  sbb eax,eax
"Rings.exe"+127349: 40                    -  inc eax
"Rings.exe"+12734A: 40                    -  inc eax
"Rings.exe"+12734B: 89 86 B8 00 00 00     -  mov [esi+000000B8],eax
"Rings.exe"+127351: EB 31                 -  jmp Rings.exe+127384
"Rings.exe"+127353: FF 76 18              -  push [esi+18]
"Rings.exe"+127356: E8 25 34 14 00        -  call Rings.exe+26A780
// ---------- INJECTING HERE ----------
"Rings.exe"+12735B: 8B 80 B4 00 00 00     -  mov eax,[eax+000000B4]
// ---------- DONE INJECTING  ----------
"Rings.exe"+127361: 59                    -  pop ecx
"Rings.exe"+127362: 89 46 08              -  mov [esi+08],eax
"Rings.exe"+127365: 8B 46 0C              -  mov eax,[esi+0C]
"Rings.exe"+127368: 6A 00                 -  push 00
"Rings.exe"+12736A: 89 46 04              -  mov [esi+04],eax
"Rings.exe"+12736D: 6A 04                 -  push 04
"Rings.exe"+12736F: C6 06 01              -  mov byte ptr [esi],01
"Rings.exe"+127372: 01 BB 18 01 00 00     -  add [ebx+00000118],edi
"Rings.exe"+127378: 58                    -  pop eax
"Rings.exe"+127379: 8B 8E B4 00 00 00     -  mov ecx,[esi+000000B4]
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>34</ID>
          <Description>"Instant Research - Buildings"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(INSTANTEVOL,Rings.exe,8B 40 58 89 46 08) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov eax,0

  // Non hijacked code here
  mov [esi+08],eax
  jmp return

INSTANTEVOL:
  jmp newmem
  nop
return:
registersymbol(INSTANTEVOL)

[DISABLE]

INSTANTEVOL:
  db 8B 40 58 89 46 08

unregistersymbol(INSTANTEVOL)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Rings.exe"+12727F

"Rings.exe"+127268: 57                    -  push edi
"Rings.exe"+127269: 74 74                 -  je Rings.exe+1272DF
"Rings.exe"+12726B: 48                    -  dec eax
"Rings.exe"+12726C: 74 4F                 -  je Rings.exe+1272BD
"Rings.exe"+12726E: 48                    -  dec eax
"Rings.exe"+12726F: 74 06                 -  je Rings.exe+127277
"Rings.exe"+127271: 90                    -  nop 
"Rings.exe"+127272: E9 0D 01 00 00        -  jmp Rings.exe+127384
"Rings.exe"+127277: FF 76 18              -  push [esi+18]
"Rings.exe"+12727A: E8 21 35 14 00        -  call Rings.exe+26A7A0
// ---------- INJECTING HERE ----------
"Rings.exe"+12727F: 8B 40 58              -  mov eax,[eax+58]
"Rings.exe"+127282: 89 46 08              -  mov [esi+08],eax
// ---------- DONE INJECTING  ----------
"Rings.exe"+127285: 8B 46 0C              -  mov eax,[esi+0C]
"Rings.exe"+127288: C6 06 01              -  mov byte ptr [esi],01
"Rings.exe"+12728B: 89 46 04              -  mov [esi+04],eax
"Rings.exe"+12728E: 59                    -  pop ecx
"Rings.exe"+12728F: 81 C6 B4 00 00 00     -  add esi,000000B4
"Rings.exe"+127295: 8B 0E                 -  mov ecx,[esi]
"Rings.exe"+127297: 8B 81 AC 05 00 00     -  mov eax,[ecx+000005AC]
"Rings.exe"+12729D: 8B B8 98 00 00 00     -  mov edi,[eax+00000098]
"Rings.exe"+1272A3: 8B 01                 -  mov eax,[ecx]
"Rings.exe"+1272A5: 6A 01                 -  push 01
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>37</ID>
          <Description>"Instant Research - Units"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(INSTANTEVOLU,Rings.exe,8B 40 24 89 46 08) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov eax,0

  // Code not hijacked
  mov [esi+08],eax
  jmp return

INSTANTEVOLU:
  jmp newmem
  nop
return:
registersymbol(INSTANTEVOLU)

[DISABLE]

INSTANTEVOLU:
  db 8B 40 24 89 46 08

unregistersymbol(INSTANTEVOLU)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Rings.exe"+1272C5

"Rings.exe"+1272A5: 6A 01                 -  push 01
"Rings.exe"+1272A7: FF 50 24              -  call dword ptr [eax+24]
"Rings.exe"+1272AA: 50                    -  push eax
"Rings.exe"+1272AB: 57                    -  push edi
"Rings.exe"+1272AC: FF 36                 -  push [esi]
"Rings.exe"+1272AE: B9 70 46 BD 00        -  mov ecx,Rings.exe+7D4670
"Rings.exe"+1272B3: E8 1D AD FF FF        -  call Rings.exe+121FD5
"Rings.exe"+1272B8: E9 C7 00 00 00        -  jmp Rings.exe+127384
"Rings.exe"+1272BD: FF 76 18              -  push [esi+18]
"Rings.exe"+1272C0: E8 3B 35 14 00        -  call Rings.exe+26A800
// ---------- INJECTING HERE ----------
"Rings.exe"+1272C5: 8B 40 24              -  mov eax,[eax+24]
"Rings.exe"+1272C8: 89 46 08              -  mov [esi+08],eax
// ---------- DONE INJECTING  ----------
"Rings.exe"+1272CB: 8B 46 0C              -  mov eax,[esi+0C]
"Rings.exe"+1272CE: 89 46 04              -  mov [esi+04],eax
"Rings.exe"+1272D1: 59                    -  pop ecx
"Rings.exe"+1272D2: 33 C0                 -  xor eax,eax
"Rings.exe"+1272D4: C6 06 01              -  mov byte ptr [esi],01
"Rings.exe"+1272D7: 6A 00                 -  push 00
"Rings.exe"+1272D9: 40                    -  inc eax
"Rings.exe"+1272DA: E9 9A 00 00 00        -  jmp Rings.exe+127379
"Rings.exe"+1272DF: FF 75 08              -  push [ebp+08]
"Rings.exe"+1272E2: B9 E4 05 B5 00        -  mov ecx,Rings.exe+7505E4
}
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>3</ID>
      <Description>"Food"</Description>
      <VariableType>4 Bytes</VariableType>
      <Address>Rings.exe+7505E8</Address>
      <Offsets>
        <Offset>100</Offset>
      </Offsets>
    </CheatEntry>
    <CheatEntry>
      <ID>1</ID>
      <Description>"Iron"</Description>
      <VariableType>4 Bytes</VariableType>
      <Address>Rings.exe+7505E8</Address>
      <Offsets>
        <Offset>104</Offset>
      </Offsets>
    </CheatEntry>
    <CheatEntry>
      <ID>4</ID>
      <Description>"Max Pop"</Description>
      <VariableType>4 Bytes</VariableType>
      <Address>Rings.exe+7505E8</Address>
      <Offsets>
        <Offset>114</Offset>
      </Offsets>
    </CheatEntry>
    <CheatEntry>
      <ID>5</ID>
      <Description>"Current Pop"</Description>
      <VariableType>4 Bytes</VariableType>
      <Address>Rings.exe+7505E8</Address>
      <Offsets>
        <Offset>118</Offset>
      </Offsets>
    </CheatEntry>
    <CheatEntry>
      <ID>6</ID>
      <Description>"Fate Points"</Description>
      <VariableType>4 Bytes</VariableType>
      <Address>Rings.exe+7505E8</Address>
      <Offsets>
        <Offset>F8</Offset>
      </Offsets>
    </CheatEntry>
    <CheatEntry>
      <ID>12</ID>
      <Description>"Can Use Power"</Description>
      <VariableType>Byte</VariableType>
      <Address>Rings.exe+7740AC</Address>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
